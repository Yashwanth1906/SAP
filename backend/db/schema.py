from fastapi import HTTPException
from .connection import db_manager

def initialize_schema():
    try:
        with db_manager.get_cursor() as cursor:
            try:
                cursor.execute("""
                    CREATE TABLE ORGANIZATIONS (
                        ID INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                        NAME NVARCHAR(255) NOT NULL,
                        ORGANIZATION_REGISTRATION_NUMBER NVARCHAR(255),
                        COUNTRY NVARCHAR(255),
                        CITY NVARCHAR(255),
                        EMAIL NVARCHAR(255) UNIQUE,
                        PASSWORD NVARCHAR(255),
                        WEBSITE NVARCHAR(255),
                        LOGO NVARCHAR(255),
                        TYPE NVARCHAR(255),
                        CONTACT_NUMBER NVARCHAR(255),
                        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        ISPREMIUM TINYINT DEFAULT 0,
                        RAZORPAY_CUSTOMER_ID NVARCHAR(255),
                        RAZORPAY_SUBSCRIPTION_ID NVARCHAR(255)
                    )
                """)
            except Exception:
                print("Table ORGANIZATIONS already exists, skipping creation.")

            try:
                cursor.execute("""
                    CREATE TABLE MODELS (
                        ID INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                        ORGANIZATION_ID INTEGER NOT NULL,
                        NAME NVARCHAR(255) NOT NULL,
                        TYPE NVARCHAR(100) NOT NULL,
                        DESCRIPTION NVARCHAR(1000),
                        GITHUB_URL NVARCHAR(500),
                        GITHUB_ACTIONS BOOLEAN DEFAULT FALSE,
                        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        FOREIGN KEY (ORGANIZATION_ID) REFERENCES ORGANIZATIONS(ID) ON DELETE CASCADE
                    )
                """)
            except Exception:
                print("Table MODELS already exists, skipping creation.")

            try:
                cursor.execute("""
                    CREATE TABLE CERTIFICATION_TYPES (
                        ID INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                        NAME NVARCHAR(255),
                        DESCRIPTION NVARCHAR(1000),
                    )
                """)
            except Exception:
                print("Table CERTIFICATION_TYPES already exists, skipping creation.")

            try:
                cursor.execute("""
                    CREATE TABLE REPORTS (
                        ID INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                        MODEL_ID INTEGER NOT NULL,
                        MITIGATION_TECHNIQUES NVARCHAR(1000),
                        BIAS_FEATURE NVARCHAR(255),
                        FAIRNESS_SCORE DECIMAL(5,2),
                        INTENTIONAL_BIAS NVARCHAR(255),
                        SHAP NVARCHAR(1000),
                        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        FOREIGN KEY (MODEL_ID) REFERENCES MODELS(ID) ON DELETE CASCADE
                    )
                """)
            except Exception:
                print("Table REPORTS already exists, skipping creation.")
    
            try:
                cursor.execute("""
                    CREATE TABLE VERSIONS (
                        ID INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                        NAME NVARCHAR(255),
                        SELECTION_DATA NVARCHAR(1000),
                        IS_PUBLIC BOOLEAN DEFAULT FALSE,
                        CERTIFICATION_TYPE_ID INTEGER,
                        REPORT_ID INTEGER,
                        MODEL_ID INTEGER NOT NULL,
                        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        FOREIGN KEY (MODEL_ID) REFERENCES MODELS(ID) ON DELETE CASCADE,
                        FOREIGN KEY (CERTIFICATION_TYPE_ID) REFERENCES CERTIFICATION_TYPES(ID) ON DELETE SET NULL,
                        FOREIGN KEY (REPORT_ID) REFERENCES REPORTS(ID) ON DELETE SET NULL
                    )
                """)
            except Exception:
                print("Table VERSIONS already exists, skipping creation.")
            try:
                cursor.execute("""
                    CREATE TABLE ALERTS (
                        ID INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                        MODEL_ID INTEGER NOT NULL,
                        ORGANIZATION_ID INTEGER NOT NULL,
                        GITHUB_URL NVARCHAR(500) NOT NULL,
                        VERSION_ID INTEGER,
                        CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        FOREIGN KEY (MODEL_ID) REFERENCES MODELS(ID) ON DELETE CASCADE,
                        FOREIGN KEY (ORGANIZATION_ID) REFERENCES ORGANIZATIONS(ID) ON DELETE CASCADE,
                        FOREIGN KEY (VERSION_ID) REFERENCES VERSIONS(ID) ON DELETE SET NULL
                    )
                """)
            except Exception:
                print("Table ALERTS already exists, skipping creation.")


        return {"message": "Database schema initialized successfully"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to initialize schema: {str(e)}")

def clear_schema():
    try:
        with db_manager.get_cursor() as cursor:
            cursor.execute("""
                SELECT TABLE_NAME 
                FROM TABLES 
                WHERE SCHEMA_NAME = CURRENT_SCHEMA
            """)
            
            tables = cursor.fetchall()
            
            for table in tables:
                table_name = table[0]
                cursor.execute(f'DROP TABLE "{table_name}" CASCADE')
                
        return {"message": "Database schema cleared successfully"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to clear schema: {str(e)}")
    


